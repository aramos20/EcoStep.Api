name: Build and Push .NET API

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dotnet-version:
        type: choice
        options:
          - 8.x
          - 9.x
        description: ".NET version to use"
        required: false
        default: 8.x

jobs:
  install-deps:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      deps-cache-key: ${{ steps.cache-key.outputs.CACHE_KEY}}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Calculate cache Key
        id: cache-key
        run: echo "CACHE_KEY=${{ runner.os }}-dotnet-${{ inputs.dotnet-version }}-${{ hashFiles('**/*.csproj' )}}" >> "$GITHUB_OUTPUT"

      - name: Restore dependencies from cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.nuget/packages
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-dotnet-

      - name: Audit dependencies for vulnerabilities
        run: dotnet list package --vulnerable --include-transitive

      - name: Install dependencies
        if: ${{ !steps.cache.outputs.cache-hit }}
        run: dotnet restore

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   needs: install-deps
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: ${{ inputs.dotnet-version }}

  #     - name: Download cached dependencies
  #       uses: actions/cache@v3
  #       if: ${{ needs.install-deps.outputs.deps-cache-key }}
  #       id: cache
  #       with:
  #         path: 13-caching/react-app/node_modules
  #         key: ${{ needs.install-deps.outputs.deps-cache-key }}

  #     - name: Building
  #       run: npm run build

  Buil-tag-push-image:
    name: Build, tag, and push image to Amazon ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
